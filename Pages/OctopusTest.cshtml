@page
@model EnergyTariffAdvisor.Pages.OctopusTestModel

<h2>Octopus Energy Products</h2>

@if (Model.Products.Any())
{
    <div class="row row-cols-1 row-cols-md-2 g-4">
        @foreach (var product in Model.Products)
        {
            <div class="col">
                <div class="card shadow-sm h-100 border-0">
                    <div class="card-header text-white fw-bold
                @(product.Code.Contains("AGILE") ? "bg-purple" :
                                   product.Code.Contains("GO") ? "bg-dark" :
                                   "bg-secondary")">
                @product.DisplayName (@product.Code)
            </div>
                    <div class="card-body">
                <ul class="list-unstyled">
                    <li><strong>Direction:</strong> @product.Direction</li>
                    <li><strong>Green:</strong> @(product.IsGreen ? "Yes" : "No")</li>
                    <li><strong>Variable:</strong> @(product.IsVariable ? "Yes" : "No")</li>
                    <li><strong>Available from:</strong> @product.AvailableFrom.ToShortDateString()</li>
                    <li><strong>Description:</strong> @product.Description</li>
                </ul>

                        @if (product.Links != null && product.Links.Any())
                        {
                            <p class="mt-2 mb-1"><strong>API Links:</strong></p>
                            <ul class="list-unstyled">
                                @foreach (var link in product.Links)
                                {
                                    <li><a href="@link.Href" target="_blank">@link.Href</a></li>
                                }
                            </ul>
                        }

                        @if (Model.TariffsByProduct.ContainsKey(product.Code))
                        {
                            <hr />
                            <h6>Tariffs:</h6>
                            <div class="accordion accordion-flush" id="accordion-@product.Code">
                                @foreach (var tariff in Model.TariffsByProduct[product.Code])
                                {
                                    var tariffId = $"tariff-{product.Code}-{tariff.Code}";
                                    <div class="accordion-item">
                                        <h2 class="accordion-header" id="heading-@tariffId">
                                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapse-@tariffId" aria-expanded="false" aria-controls="collapse-@tariffId">
                                                @tariff.Code
                                            </button>
                                        </h2>
                                        <div id="collapse-@tariffId" class="accordion-collapse collapse" aria-labelledby="heading-@tariffId" data-bs-parent="#accordion-@product.Code">
                                            <div class="accordion-body">
                                                <p><strong>Standing Charge:</strong> @tariff.StandingChargeIncVat.ToString("0.###") p/day</p>
                                                <p><strong>Unit Rate:</strong> @tariff.StandardUnitRateIncVat.ToString("0.###") p/kWh</p>
                                                <p><strong>Exit Fees:</strong> @tariff.ExitFeesType</p>

                                                @if (Model.UnitRatesByTariff.ContainsKey(tariff.Code))
                                                {
                                                    var average = tariff.StandardUnitRateIncVat;
                                                    var allRates = Model.UnitRatesByTariff[tariff.Code];

                                                    <details>
                                                        <summary style="cursor:pointer;">View unit rates</summary>
                                                        <ul class="list-unstyled mt-2">
                                                            @foreach (var currentRate in allRates)
                                                            {
                                                                string color = "text-body";
                                                                if (currentRate.ValueIncVat > average * 1.1m)
                                                                    color = "text-danger";
                                                                else if (currentRate.ValueIncVat < average * 0.9m)
                                                                    color = "text-success";

                                                                <li class="@color">
                                                                    <strong>@currentRate.ValidFrom.ToString("dd.MM.yyyy HH:mm")</strong> —
                                                                    @currentRate.ValueIncVat.ToString("0.###") p/kWh
                                                                </li>
                                                            }
                                                        </ul>
                                                    </details>
                                                }
                                                else
                                                {
                                                    <p class="text-muted fst-italic">No unit rates loaded.</p>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <p class="text-muted fst-italic mt-2">No tariff details loaded yet.</p>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <p class="text-muted">Loading or no data available.</p>
}